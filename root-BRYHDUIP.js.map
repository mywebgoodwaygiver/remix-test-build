{
  "version": 3,
  "sources": ["../../app/root.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/root.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/root.tsx\");\n}\n// REMIX HMR END\n\nimport ContextProvider from \"./components/context/ContextProvider\";\nimport { Links, LiveReload, Meta, Outlet, Scripts, ScrollRestoration } from \"@remix-run/react\";\nimport reactTostify from 'react-toastify/dist/ReactToastify.css';\nimport { SkeletonTheme } from \"react-loading-skeleton\";\nimport { useEffect, useState } from \"react\";\nimport { ToastContainer } from \"react-toastify\";\nimport appStylesHref from \"./tailwind.css\";\nimport reactSkeleton from \"react-loading-skeleton/dist/skeleton.css\";\nexport const links = () => [{\n  rel: \"stylesheet\",\n  href: appStylesHref\n}, {\n  rel: \"stylesheet\",\n  href: reactTostify\n}, {\n  rel: \"stylesheet\",\n  href: reactSkeleton\n}];\nexport default function App() {\n  _s();\n  const [theme, setTheme] = useState('light'); // Default to light theme initially\n\n  useEffect(() => {\n    // Check if the window object is available (client-side)\n    if (typeof window !== 'undefined') {\n      const updateTheme = () => {\n        const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n        setTheme(systemTheme);\n      };\n\n      // Initial theme setup\n      updateTheme();\n\n      // Listen for changes in system theme\n      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', updateTheme);\n\n      // Clean up the listener\n      return () => {\n        window.matchMedia('(prefers-color-scheme: dark)').removeEventListener('change', updateTheme);\n      };\n    }\n  }, []);\n  return <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <ContextProvider>\n          <SkeletonTheme baseColor={theme === 'light' ? '#171717' : '#ffffff'} highlightColor={theme === 'light' ? '#444' : '#777777'}>\n            {/* <AlertProvider template={AlertTemplate} {...options}> */}\n            <ToastContainer position=\"top-right\" autoClose={5000} hideProgressBar={false} newestOnTop={false} closeOnClick rtl={false} pauseOnFocusLoss draggable pauseOnHover theme=\"dark\" />\n\n            <Outlet />\n            <ScrollRestoration />\n            <LiveReload />\n            <Scripts />\n            {/* </AlertProvider> */}\n          </SkeletonTheme>\n        </ContextProvider>\n\n      </body>\n    </html>;\n}\n_s(App, \"Z8UCD9KudyQA62DCQ9e5cf9+m5k=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,IAAAA,gBAAoC;;;;;;;;;AAwC5B;AA/DR,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,mBAAqB,EAAE;AAAA,EAChE;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAc;AAChB;AAWO,IAAM,QAAQ,MAAM,CAAC;AAAA,EAC1B,KAAK;AAAA,EACL,MAAM;AACR,GAAG;AAAA,EACD,KAAK;AAAA,EACL,MAAM;AACR,GAAG;AAAA,EACD,KAAK;AAAA,EACL,MAAM;AACR,CAAC;AACc,SAAR,MAAuB;AAC5B,KAAG;AACH,QAAM,CAAC,OAAO,QAAQ,QAAI,wBAAS,OAAO;AAE1C,+BAAU,MAAM;AAEd,QAAI,OAAO,WAAW,aAAa;AACjC,YAAM,cAAc,MAAM;AACxB,cAAM,cAAc,OAAO,WAAW,8BAA8B,EAAE,UAAU,SAAS;AACzF,iBAAS,WAAW;AAAA,MACtB;AAGA,kBAAY;AAGZ,aAAO,WAAW,8BAA8B,EAAE,iBAAiB,UAAU,WAAW;AAGxF,aAAO,MAAM;AACX,eAAO,WAAW,8BAA8B,EAAE,oBAAoB,UAAU,WAAW;AAAA,MAC7F;AAAA,IACF;AAAA,EACF,GAAG,CAAC,CAAC;AACL,SAAO,mDAAC,UAAK,MAAK,MACd;AAAA,uDAAC,UACC;AAAA,yDAAC,UAAK,SAAQ,WAAd;AAAA;AAAA;AAAA;AAAA,aAAsB;AAAA,MACtB,mDAAC,UAAK,MAAK,YAAW,SAAQ,yCAA9B;AAAA;AAAA;AAAA;AAAA,aAAoE;AAAA,MACpE,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAM;AAAA,MACN,mDAAC,WAAD;AAAA;AAAA;AAAA;AAAA,aAAO;AAAA,SAJT;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,IACA,mDAAC,UACC,6DAAC,2BACC,6DAAC,iBAAc,WAAW,UAAU,UAAU,YAAY,WAAW,gBAAgB,UAAU,UAAU,SAAS,WAEhH;AAAA,yDAAC,KAAe,UAAS,aAAY,WAAW,KAAM,iBAAiB,OAAO,aAAa,OAAO,cAAY,MAAC,KAAK,OAAO,kBAAgB,MAAC,WAAS,MAAC,cAAY,MAAC,OAAM,UAAzK;AAAA;AAAA;AAAA;AAAA,aAAgL;AAAA,MAEhL,mDAAC,YAAD;AAAA;AAAA;AAAA;AAAA,aAAQ;AAAA,MACR,mDAAC,uBAAD;AAAA;AAAA;AAAA;AAAA,aAAmB;AAAA,MACnB,mDAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,aAAY;AAAA,MACZ,mDAAC,aAAD;AAAA;AAAA;AAAA;AAAA,aAAS;AAAA,SAPX;AAAA;AAAA;AAAA;AAAA,WASA,KAVF;AAAA;AAAA;AAAA;AAAA,WAWA,KAZF;AAAA;AAAA;AAAA;AAAA,WAcA;AAAA,OArBG;AAAA;AAAA;AAAA;AAAA,SAsBL;AACJ;AACA,GAAG,KAAK,8BAA8B;AACtC,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,KAAK;AAEtB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["import_react"]
}
