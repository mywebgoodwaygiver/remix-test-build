{
  "version": 3,
  "sources": ["../../../app/components/context/ContextProvider.tsx", "../../../node_modules/react-loading-skeleton/dist/index.js"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/context/ContextProvider.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/context/ContextProvider.tsx\");\n  import.meta.hot.lastModified = \"1704558241364.8625\";\n}\n// REMIX HMR END\n\nimport React, { createContext, useState } from \"react\";\n\n// type SpeechRecognitionContextType = {\n//   isSpeechRecognitionActive: boolean;\n//   setIsSpeechRecognitionActive: Dispatch<SetStateAction<boolean>>;\n//   // ... other properties if needed\n// };\n\nexport const postdata = createContext({\n  postData: [],\n  setPostData: () => {}\n});\nexport const latestPost = createContext({\n  latestPostData: [],\n  setLatestPostData: () => {}\n});\nexport const postsMetaContext = createContext({\n  postsMeta: [],\n  setPostsMeta: () => {}\n});\nexport const popularPost = createContext({\n  popularPostData: [],\n  setPopularPostData: () => {}\n});\nexport const myPage = createContext({\n  page: 1,\n  setPage: () => {}\n});\nexport const showSpiner = createContext({\n  showSpin: null,\n  setShowSpin: () => {}\n});\nexport const IsPostLoadingFunc = createContext({\n  isLoading: false,\n  setIsLoading: () => {}\n});\nexport const currentUrl = createContext({\n  urlNow: \"\",\n  setUrlNow: () => {}\n});\nexport const typingInput = createContext({\n  typing: false,\n  setTyping: () => {}\n});\nexport const Mode = createContext({\n  isDarkMode: false,\n  setIsDarkMode: () => {}\n});\nexport const PostsByTags = createContext({\n  MyTagPostsHook: [],\n  setMyTagPostsHook: () => {}\n});\nexport const speakingTimeOut = createContext({\n  speechTimeout: null,\n  setSpeechTimeout: () => {}\n});\n\n// export const SpeechRecognitionContext = createContext<SpeechRecognitionContextType | undefined>(\n//   undefined\n// );\n\nexport const mySearchInput = createContext({\n  searchInput: \"\",\n  setSearchInput: () => {}\n});\nconst ContextProvider = ({\n  children\n}) => {\n  _s();\n  const [postData, setPostData] = useState([]);\n  const [latestPostData, setLatestPostData] = useState([]);\n  const [postsMeta, setPostsMeta] = useState([]);\n  const [popularPostData, setPopularPostData] = useState([]);\n  const [page, setPage] = useState(1);\n  const [showSpin, setShowSpin] = useState(null);\n  const [searchInput, setSearchInput] = useState(\"\");\n  const [typing, setTyping] = useState(false);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  const [MyTagPostsHook, setMyTagPostsHook] = useState([]);\n  const [speechTimeout, setSpeechTimeout] = useState(null);\n  const [urlNow, setUrlNow] = useState(\"home\");\n  const [isLoading, setIsLoading] = useState(false);\n  return <postdata.Provider value={{\n    postData,\n    setPostData\n  }}>\n      <latestPost.Provider value={{\n      latestPostData,\n      setLatestPostData\n    }}>\n      <postsMetaContext.Provider value={{\n        postsMeta,\n        setPostsMeta\n      }}>\n        <popularPost.Provider value={{\n          popularPostData,\n          setPopularPostData\n        }}>\n          <myPage.Provider value={{\n            page,\n            setPage\n          }}>\n            <showSpiner.Provider value={{\n              showSpin,\n              setShowSpin\n            }}>\n              <mySearchInput.Provider value={{\n                searchInput,\n                setSearchInput\n              }}>\n                <typingInput.Provider value={{\n                  typing,\n                  setTyping\n                }}>\n                  <Mode.Provider value={{\n                    isDarkMode,\n                    setIsDarkMode\n                  }}>\n                  <PostsByTags.Provider value={{\n                      MyTagPostsHook,\n                      setMyTagPostsHook\n                    }}>\n                  <speakingTimeOut.Provider value={{\n                        speechTimeout,\n                        setSpeechTimeout\n                      }}>\n                  <currentUrl.Provider value={{\n                          urlNow,\n                          setUrlNow\n                        }}>\n                  <IsPostLoadingFunc.Provider value={{\n                            isLoading,\n                            setIsLoading\n                          }}>\n                    {children}\n                  </IsPostLoadingFunc.Provider>\n                  </currentUrl.Provider>\n                  </speakingTimeOut.Provider>\n                  </PostsByTags.Provider>\n                  </Mode.Provider>\n                </typingInput.Provider>\n              </mySearchInput.Provider>\n            </showSpiner.Provider>\n          </myPage.Provider>\n        </popularPost.Provider>\n      </postsMetaContext.Provider>\n      </latestPost.Provider>\n    </postdata.Provider>;\n};\n_s(ContextProvider, \"w4AynPPMKTD7hWN/MK/8VPkbmRM=\");\n_c = ContextProvider;\nexport default ContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ContextProvider\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "'use client';\nimport React from 'react';\n\n/**\n * @internal\n */\nconst SkeletonThemeContext = React.createContext({});\n\n/* eslint-disable react/no-array-index-key */\nconst defaultEnableAnimation = true;\n// For performance & cleanliness, don't add any inline styles unless we have to\nfunction styleOptionsToCssProperties({ baseColor, highlightColor, width, height, borderRadius, circle, direction, duration, enableAnimation = defaultEnableAnimation, }) {\n    const style = {};\n    if (direction === 'rtl')\n        style['--animation-direction'] = 'reverse';\n    if (typeof duration === 'number')\n        style['--animation-duration'] = `${duration}s`;\n    if (!enableAnimation)\n        style['--pseudo-element-display'] = 'none';\n    if (typeof width === 'string' || typeof width === 'number')\n        style.width = width;\n    if (typeof height === 'string' || typeof height === 'number')\n        style.height = height;\n    if (typeof borderRadius === 'string' || typeof borderRadius === 'number')\n        style.borderRadius = borderRadius;\n    if (circle)\n        style.borderRadius = '50%';\n    if (typeof baseColor !== 'undefined')\n        style['--base-color'] = baseColor;\n    if (typeof highlightColor !== 'undefined')\n        style['--highlight-color'] = highlightColor;\n    return style;\n}\nfunction Skeleton({ count = 1, wrapper: Wrapper, className: customClassName, containerClassName, containerTestId, circle = false, style: styleProp, ...originalPropsStyleOptions }) {\n    var _a, _b, _c;\n    const contextStyleOptions = React.useContext(SkeletonThemeContext);\n    const propsStyleOptions = { ...originalPropsStyleOptions };\n    // DO NOT overwrite style options from the context if `propsStyleOptions`\n    // has properties explicity set to undefined\n    for (const [key, value] of Object.entries(originalPropsStyleOptions)) {\n        if (typeof value === 'undefined') {\n            delete propsStyleOptions[key];\n        }\n    }\n    // Props take priority over context\n    const styleOptions = {\n        ...contextStyleOptions,\n        ...propsStyleOptions,\n        circle,\n    };\n    // `styleProp` has the least priority out of everything\n    const style = {\n        ...styleProp,\n        ...styleOptionsToCssProperties(styleOptions),\n    };\n    let className = 'react-loading-skeleton';\n    if (customClassName)\n        className += ` ${customClassName}`;\n    const inline = (_a = styleOptions.inline) !== null && _a !== void 0 ? _a : false;\n    const elements = [];\n    const countCeil = Math.ceil(count);\n    for (let i = 0; i < countCeil; i++) {\n        let thisStyle = style;\n        if (countCeil > count && i === countCeil - 1) {\n            // count is not an integer and we've reached the last iteration of\n            // the loop, so add a \"fractional\" skeleton.\n            //\n            // For example, if count is 3.5, we've already added 3 full\n            // skeletons, so now we add one more skeleton that is 0.5 times the\n            // original width.\n            const width = (_b = thisStyle.width) !== null && _b !== void 0 ? _b : '100%'; // 100% is the default since that's what's in the CSS\n            const fractionalPart = count % 1;\n            const fractionalWidth = typeof width === 'number'\n                ? width * fractionalPart\n                : `calc(${width} * ${fractionalPart})`;\n            thisStyle = { ...thisStyle, width: fractionalWidth };\n        }\n        const skeletonSpan = (React.createElement(\"span\", { className: className, style: thisStyle, key: i }, \"\\u200C\"));\n        if (inline) {\n            elements.push(skeletonSpan);\n        }\n        else {\n            // Without the <br />, the skeleton lines will all run together if\n            // `width` is specified\n            elements.push(React.createElement(React.Fragment, { key: i },\n                skeletonSpan,\n                React.createElement(\"br\", null)));\n        }\n    }\n    return (React.createElement(\"span\", { className: containerClassName, \"data-testid\": containerTestId, \"aria-live\": \"polite\", \"aria-busy\": (_c = styleOptions.enableAnimation) !== null && _c !== void 0 ? _c : defaultEnableAnimation }, Wrapper\n        ? elements.map((el, i) => React.createElement(Wrapper, { key: i }, el))\n        : elements));\n}\n\nfunction SkeletonTheme({ children, ...styleOptions }) {\n    return (React.createElement(SkeletonThemeContext.Provider, { value: styleOptions }, children));\n}\n\nexport { SkeletonTheme, Skeleton as default };\n"],
  "mappings": "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",
  "names": ["import_react", "React", "_c"]
}
